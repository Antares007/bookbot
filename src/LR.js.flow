// @flow strict

export type Right<+T> = {| +T: 'right', +value: T |}
export type Left<+T> = {| +T: 'left', +value: T |}

declare export var left: <L>(L) => Left<L>
declare export var right: <R>(R) => Right<R>
declare export var mappend: (<R>(Right<R>, Right<R>) => Right<R>) &
  (<L, R>(Right<R>, Left<L>) => Left<L>) &
  (<L, R>(Left<L>, Right<R>) => Left<L>) &
  (<L>(Left<L>, Left<L>) => Left<L>)
declare export var map: <A, B, L>(f: (A) => B, Right<A> | Left<L>) => Right<B> | Left<L>
declare export var flatMap: <A, B, L>(
  f: (A) => Right<B> | Left<L>,
  Right<A> | Left<L>
) => Right<B> | Left<L>
