// @flow strict
import type { PPith } from './tP'

export opaque type CommitHash: string = string
export opaque type BlobHash: string = string
export opaque type TreeHash: string = string

export type Tree = {
  [string]:
    | { mode: '100644' | '100755' | '120000', hash: BlobHash }
    | { mode: '40000', hash: TreeHash }
    | { mode: '160000', hash: CommitHash }
}

export type Commit = {
  tree: TreeHash,
  parents: Array<CommitHash>,
  author: { name: string, email: string, date: { seconds: number, offset: number } },
  commiter: { name: string, email: string, date: { seconds: number, offset: number } },
  message: string
}

export type Repo = {
  loadBlob(string): PPith<Buffer>,
  loadTree(string): PPith<Tree>,
  loadCommit(string): PPith<Commit>,
  saveBlob(Buffer): PPith<BlobHash>,
  saveTree(Tree): PPith<TreeHash>,
  saveCommit(Commit): PPith<CommitHash>
}

declare export var emptyTreeHash: TreeHash
declare export var mkrepo: (gitdir: string) => Repo
