// @flow strict
import type { PPith } from './tP'

export type Tree = {
  [string]: { mode: 16384 | 33188 | 33261 | 40960 | 57344, hash: string }
}

export type Commit = {
  tree: string,
  parents: Array<string>,
  author: { name: string, email: string, date: { seconds: number, offset: number } },
  commiter: { name: string, email: string, date: { seconds: number, offset: number } },
  message: string
}

export type Repo = {
  loadAs: (('tree', string, (err: ?Error, data: ?Tree) => void) => void) &
    (('blob', string, (err: ?Error, data: ?Buffer) => void) => void) &
    (('commit', string, (err: ?Error, data: ?Commit) => void) => void),
  saveAs: (('tree', Tree, (err: ?Error, hash: string) => void) => void) &
    (('blob', Buffer, (err: ?Error, hash: string) => void) => void) &
    (('commit', Commit, (err: ?Error, hash: string) => void) => void)
}

declare export var modes: {
  tree: 16384,
  blob: 33188,
  exec: 33261,
  sym: 40960,
  commit: 57344
}

declare export var mkrepo: (gitdir: string) => Repo
