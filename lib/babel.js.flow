// @flow strict
declare export function parse(string): BNFile;
export type BNComment = {
  value: string,
  start: number,
  end: number,
  loc: BNSourceLocation,
};

export type BNCommentBlock = {
  ...BNComment,
  type: "CommentBlock",
};

export type BNCommentLine = { ...BNComment, type: "CommentLine" };

export type BNSourceLocation = {
  start: {
    line: number,
    column: number,
  },

  end: {
    line: number,
    column: number,
  },
};

export type BN = {
  +type: string,
  leadingComments?: Array<BNComment>,
  innerComments?: Array<BNComment>,
  trailingComments?: Array<BNComment>,
  start: ?number,
  end: ?number,
  loc: ?BNSourceLocation,
  extra?: { [string]: mixed },
};

export type BNArrayExpression = {
  ...BN,
  type: "ArrayExpression",
  elements?: Array<null | BNExpression | BNSpreadElement>,
};

export type BNAssignmentExpression = {
  ...BN,
  type: "AssignmentExpression",
  operator: string,
  left: BNLVal,
  right: BNExpression,
};

export type BNBinaryExpression = {
  ...BN,
  type: "BinaryExpression",
  operator:
    | "+"
    | "-"
    | "/"
    | "%"
    | "*"
    | "**"
    | "&"
    | "|"
    | ">>"
    | ">>>"
    | "<<"
    | "^"
    | "=="
    | "==="
    | "!="
    | "!=="
    | "in"
    | "instanceof"
    | ">"
    | "<"
    | ">="
    | "<=",
  left: BNExpression | BNPrivateName,
  right: BNExpression,
};

export type BNInterpreterDirective = {
  ...BN,
  type: "InterpreterDirective",
  value: string,
};

export type BNDirective = {
  ...BN,
  type: "Directive",
  value: BNDirectiveLiteral,
};

export type BNDirectiveLiteral = {
  ...BN,
  type: "DirectiveLiteral",
  value: string,
};

export type BNBlockStatement = {
  ...BN,
  type: "BlockStatement",
  body: Array<BNStatement>,
  directives?: Array<BNDirective>,
};

export type BNBreakStatement = {
  ...BN,
  type: "BreakStatement",
  label?: BNIdentifier,
};

export type BNCallExpression = {
  ...BN,
  type: "CallExpression",
  callee: BNExpression | BNV8IntrinsicIdentifier,
  arguments: Array<
    BNExpression | BNSpreadElement | BNJSXNamespacedName | BNArgumentPlaceholder
  >,
  optional?: true | false,
  typeArguments?: BNTypeParameterInstantiation,
  typeParameters?: BNTSTypeParameterInstantiation,
};

export type BNCatchClause = {
  ...BN,
  type: "CatchClause",
  param?: BNIdentifier | BNArrayPattern | BNObjectPattern,
  body: BNBlockStatement,
};

export type BNConditionalExpression = {
  ...BN,
  type: "ConditionalExpression",
  test: BNExpression,
  consequent: BNExpression,
  alternate: BNExpression,
};

export type BNContinueStatement = {
  ...BN,
  type: "ContinueStatement",
  label?: BNIdentifier,
};

export type BNDebuggerStatement = {
  ...BN,
  type: "DebuggerStatement",
};

export type BNDoWhileStatement = {
  ...BN,
  type: "DoWhileStatement",
  test: BNExpression,
  body: BNStatement,
};

export type BNEmptyStatement = { ...BN, type: "EmptyStatement" };

export type BNExpressionStatement = {
  ...BN,
  type: "ExpressionStatement",
  expression: BNExpression,
};

export type BNFile = {
  ...BN,
  type: "File",
  program: BNProgram,
  comments?: Array<BNCommentBlock | BNCommentLine>,
  tokens?: Array<mixed>,
};

export type BNForInStatement = {
  ...BN,
  type: "ForInStatement",
  left: BNVariableDeclaration | BNLVal,
  right: BNExpression,
  body: BNStatement,
};

export type BNForStatement = {
  ...BN,
  type: "ForStatement",
  init?: BNVariableDeclaration | BNExpression,
  test?: BNExpression,
  update?: BNExpression,
  body: BNStatement,
};

export type BNFunctionDeclaration = {
  ...BN,
  type: "FunctionDeclaration",
  id?: BNIdentifier,
  params: Array<
    BNIdentifier | BNPattern | BNRestElement | BNTSParameterProperty
  >,
  body: BNBlockStatement,
  generator?: boolean,
  async?: boolean,
  declare?: boolean,
  returnType?: BNTypeAnnotation | BNTSTypeAnnotation | BNNoop,
  typeParameters?:
    | BNTypeParameterDeclaration
    | BNTSTypeParameterDeclaration
    | BNNoop,
};

export type BNFunctionExpression = {
  ...BN,
  type: "FunctionExpression",
  id?: BNIdentifier,
  params: Array<
    BNIdentifier | BNPattern | BNRestElement | BNTSParameterProperty
  >,
  body: BNBlockStatement,
  generator?: boolean,
  async?: boolean,
  returnType?: BNTypeAnnotation | BNTSTypeAnnotation | BNNoop,
  typeParameters?:
    | BNTypeParameterDeclaration
    | BNTSTypeParameterDeclaration
    | BNNoop,
};

export type BNIdentifier = {
  ...BN,
  type: "Identifier",
  name: string,
  decorators?: Array<BNDecorator>,
  optional?: boolean,
  typeAnnotation?: BNTypeAnnotation | BNTSTypeAnnotation | BNNoop,
};

export type BNIfStatement = {
  ...BN,
  type: "IfStatement",
  test: BNExpression,
  consequent: BNStatement,
  alternate?: BNStatement,
};

export type BNLabeledStatement = {
  ...BN,
  type: "LabeledStatement",
  label: BNIdentifier,
  body: BNStatement,
};

export type BNStringLiteral = {
  ...BN,
  type: "StringLiteral",
  value: string,
};

export type BNNumericLiteral = {
  ...BN,
  type: "NumericLiteral",
  value: number,
};

export type BNNullLiteral = { ...BN, type: "NullLiteral" };

export type BNBooleanLiteral = {
  ...BN,
  type: "BooleanLiteral",
  value: boolean,
};

export type BNRegExpLiteral = {
  ...BN,
  type: "RegExpLiteral",
  pattern: string,
  flags?: string,
};

export type BNLogicalExpression = {
  ...BN,
  type: "LogicalExpression",
  operator: "||" | "&&" | "??",
  left: BNExpression,
  right: BNExpression,
};

export type BNMemberExpression = {
  ...BN,
  type: "MemberExpression",
  object: BNExpression,
  property: BNExpression | BNIdentifier | BNPrivateName,
  computed?: boolean,
  optional?: true | false,
};

export type BNNewExpression = {
  ...BN,
  type: "NewExpression",
  callee: BNExpression | BNV8IntrinsicIdentifier,
  arguments: Array<
    BNExpression | BNSpreadElement | BNJSXNamespacedName | BNArgumentPlaceholder
  >,
  optional?: true | false,
  typeArguments?: BNTypeParameterInstantiation,
  typeParameters?: BNTSTypeParameterInstantiation,
};

export type BNProgram = {
  ...BN,
  type: "Program",
  body: Array<BNStatement>,
  directives?: Array<BNDirective>,
  sourceType?: "script" | "module",
  interpreter?: BNInterpreterDirective,
  sourceFile: string,
};

export type BNObjectExpression = {
  ...BN,
  type: "ObjectExpression",
  properties: Array<BNObjectMethod | BNObjectProperty | BNSpreadElement>,
};

export type BNObjectMethod = {
  ...BN,
  type: "ObjectMethod",
  kind?: "method" | "get" | "set",
  key: BNExpression | BNIdentifier | BNStringLiteral | BNNumericLiteral,
  params: Array<
    BNIdentifier | BNPattern | BNRestElement | BNTSParameterProperty
  >,
  body: BNBlockStatement,
  computed?: boolean,
  generator?: boolean,
  async?: boolean,
  decorators?: Array<BNDecorator>,
  returnType?: BNTypeAnnotation | BNTSTypeAnnotation | BNNoop,
  typeParameters?:
    | BNTypeParameterDeclaration
    | BNTSTypeParameterDeclaration
    | BNNoop,
};

export type BNObjectProperty = {
  ...BN,
  type: "ObjectProperty",
  key: BNExpression | BNIdentifier | BNStringLiteral | BNNumericLiteral,
  value: BNExpression | BNPatternLike,
  computed?: boolean,
  shorthand?: boolean,
  decorators?: Array<BNDecorator>,
};

export type BNRestElement = {
  ...BN,
  type: "RestElement",
  argument: BNLVal,
  decorators?: Array<BNDecorator>,
  typeAnnotation?: BNTypeAnnotation | BNTSTypeAnnotation | BNNoop,
};

export type BNReturnStatement = {
  ...BN,
  type: "ReturnStatement",
  argument?: BNExpression,
};

export type BNSequenceExpression = {
  ...BN,
  type: "SequenceExpression",
  expressions: Array<BNExpression>,
};

export type BNParenthesizedExpression = {
  ...BN,
  type: "ParenthesizedExpression",
  expression: BNExpression,
};

export type BNSwitchCase = {
  ...BN,
  type: "SwitchCase",
  test?: BNExpression,
  consequent: Array<BNStatement>,
};

export type BNSwitchStatement = {
  ...BN,
  type: "SwitchStatement",
  discriminant: BNExpression,
  cases: Array<BNSwitchCase>,
};

export type BNThisExpression = { ...BN, type: "ThisExpression" };

export type BNThrowStatement = {
  ...BN,
  type: "ThrowStatement",
  argument: BNExpression,
};

export type BNTryStatement = {
  ...BN,
  type: "TryStatement",
  block: BNBlockStatement,
  handler?: BNCatchClause,
  finalizer?: BNBlockStatement,
};

export type BNUnaryExpression = {
  ...BN,
  type: "UnaryExpression",
  operator: "void" | "throw" | "delete" | "!" | "+" | "-" | "~" | "typeof",
  argument: BNExpression,
  prefix?: boolean,
};

export type BNUpdateExpression = {
  ...BN,
  type: "UpdateExpression",
  operator: "++" | "--",
  argument: BNExpression,
  prefix?: boolean,
};

export type BNVariableDeclaration = {
  ...BN,
  type: "VariableDeclaration",
  kind: "var" | "let" | "const",
  declarations: Array<BNVariableDeclarator>,
  declare?: boolean,
};

export type BNVariableDeclarator = {
  ...BN,
  type: "VariableDeclarator",
  id: BNLVal,
  init?: BNExpression,
  definite?: boolean,
};

export type BNWhileStatement = {
  ...BN,
  type: "WhileStatement",
  test: BNExpression,
  body: BNStatement,
};

export type BNWithStatement = {
  ...BN,
  type: "WithStatement",
  object: BNExpression,
  body: BNStatement,
};

export type BNAssignmentPattern = {
  ...BN,
  type: "AssignmentPattern",
  left: BNIdentifier | BNObjectPattern | BNArrayPattern | BNMemberExpression,
  right: BNExpression,
  decorators?: Array<BNDecorator>,
  typeAnnotation?: BNTypeAnnotation | BNTSTypeAnnotation | BNNoop,
};

export type BNArrayPattern = {
  ...BN,
  type: "ArrayPattern",
  elements: Array<null | BNPatternLike>,
  decorators?: Array<BNDecorator>,
  typeAnnotation?: BNTypeAnnotation | BNTSTypeAnnotation | BNNoop,
};

export type BNArrowFunctionExpression = {
  ...BN,
  type: "ArrowFunctionExpression",
  params: Array<
    BNIdentifier | BNPattern | BNRestElement | BNTSParameterProperty
  >,
  body: BNBlockStatement | BNExpression,
  async?: boolean,
  expression: boolean,
  generator?: boolean,
  returnType?: BNTypeAnnotation | BNTSTypeAnnotation | BNNoop,
  typeParameters?:
    | BNTypeParameterDeclaration
    | BNTSTypeParameterDeclaration
    | BNNoop,
};

export type BNClassBody = {
  ...BN,
  type: "ClassBody",
  body: Array<
    | BNClassMethod
    | BNClassPrivateMethod
    | BNClassProperty
    | BNClassPrivateProperty
    | BNTSDeclareMethod
    | BNTSIndexSignature
  >,
};

export type BNClassExpression = {
  ...BN,
  type: "ClassExpression",
  id?: BNIdentifier,
  superClass?: BNExpression,
  body: BNClassBody,
  decorators?: Array<BNDecorator>,
  mixins?: BNInterfaceExtends,
  superTypeParameters?:
    | BNTypeParameterInstantiation
    | BNTSTypeParameterInstantiation,
  typeParameters?:
    | BNTypeParameterDeclaration
    | BNTSTypeParameterDeclaration
    | BNNoop,
};

export type BNClassDeclaration = {
  ...BN,
  type: "ClassDeclaration",
  id: BNIdentifier,
  superClass?: BNExpression,
  body: BNClassBody,
  decorators?: Array<BNDecorator>,
  abstract?: boolean,
  declare?: boolean,
  mixins?: BNInterfaceExtends,
  superTypeParameters?:
    | BNTypeParameterInstantiation
    | BNTSTypeParameterInstantiation,
  typeParameters?:
    | BNTypeParameterDeclaration
    | BNTSTypeParameterDeclaration
    | BNNoop,
};

export type BNExportAllDeclaration = {
  ...BN,
  type: "ExportAllDeclaration",
  source: BNStringLiteral,
};

export type BNExportDefaultDeclaration = {
  ...BN,
  type: "ExportDefaultDeclaration",
  declaration:
    | BNFunctionDeclaration
    | BNTSDeclareFunction
    | BNClassDeclaration
    | BNExpression,
};

export type BNExportNamedDeclaration = {
  ...BN,
  type: "ExportNamedDeclaration",
  declaration?: BNDeclaration,
  specifiers?: Array<
    BNExportSpecifier | BNExportDefaultSpecifier | BNExportNamespaceSpecifier
  >,
  source?: BNStringLiteral,
  exportKind?: "type" | "value",
};

export type BNExportSpecifier = {
  ...BN,
  type: "ExportSpecifier",
  local: BNIdentifier,
  exported: BNIdentifier | BNStringLiteral,
};

export type BNForOfStatement = {
  ...BN,
  type: "ForOfStatement",
  left: BNVariableDeclaration | BNLVal,
  right: BNExpression,
  body: BNStatement,
};

export type BNImportDeclaration = {
  ...BN,
  type: "ImportDeclaration",
  specifiers: Array<
    BNImportSpecifier | BNImportDefaultSpecifier | BNImportNamespaceSpecifier
  >,
  source: BNStringLiteral,
  importKind?: "type" | "typeof" | "value",
};

export type BNImportDefaultSpecifier = {
  ...BN,
  type: "ImportDefaultSpecifier",
  local: BNIdentifier,
};

export type BNImportNamespaceSpecifier = {
  ...BN,
  type: "ImportNamespaceSpecifier",
  local: BNIdentifier,
};

export type BNImportSpecifier = {
  ...BN,
  type: "ImportSpecifier",
  local: BNIdentifier,
  imported: BNIdentifier | BNStringLiteral,
  importKind?: "type" | "typeof",
};

export type BNMetaProperty = {
  ...BN,
  type: "MetaProperty",
  meta: BNIdentifier,
  property: BNIdentifier,
};

export type BNClassMethod = {
  ...BN,
  type: "ClassMethod",
  kind?: "get" | "set" | "method" | "constructor",
  key: BNIdentifier | BNStringLiteral | BNNumericLiteral | BNExpression,
  params: Array<
    BNIdentifier | BNPattern | BNRestElement | BNTSParameterProperty
  >,
  body: BNBlockStatement,
  computed?: boolean,
  generator?: boolean,
  async?: boolean,
  abstract?: boolean,
  access?: "public" | "private" | "protected",
  accessibility?: "public" | "private" | "protected",
  decorators?: Array<BNDecorator>,
  optional?: boolean,
  returnType?: BNTypeAnnotation | BNTSTypeAnnotation | BNNoop,
  typeParameters?:
    | BNTypeParameterDeclaration
    | BNTSTypeParameterDeclaration
    | BNNoop,
};

export type BNObjectPattern = {
  ...BN,
  type: "ObjectPattern",
  properties: Array<BNRestElement | BNObjectProperty>,
  decorators?: Array<BNDecorator>,
  typeAnnotation?: BNTypeAnnotation | BNTSTypeAnnotation | BNNoop,
};

export type BNSpreadElement = {
  ...BN,
  type: "SpreadElement",
  argument: BNExpression,
};

export type BNSuper = { ...BN, type: "Super" };

export type BNTaggedTemplateExpression = {
  ...BN,
  type: "TaggedTemplateExpression",
  tag: BNExpression,
  quasi: BNTemplateLiteral,
  typeParameters?:
    | BNTypeParameterInstantiation
    | BNTSTypeParameterInstantiation,
};

export type BNTemplateElement = {
  ...BN,
  type: "TemplateElement",
  value: { raw: string, cooked?: string },
  tail?: boolean,
};

export type BNTemplateLiteral = {
  ...BN,
  type: "TemplateLiteral",
  quasis: Array<BNTemplateElement>,
  expressions: Array<BNExpression | BNTSType>,
};

export type BNYieldExpression = {
  ...BN,
  type: "YieldExpression",
  argument?: BNExpression,
  delegate?: boolean,
};

export type BNAwaitExpression = {
  ...BN,
  type: "AwaitExpression",
  argument: BNExpression,
};

export type BNImport = { ...BN, type: "Import" };

export type BNBigIntLiteral = {
  ...BN,
  type: "BigIntLiteral",
  value: string,
};

export type BNExportNamespaceSpecifier = {
  ...BN,
  type: "ExportNamespaceSpecifier",
  exported: BNIdentifier,
};

export type BNOptionalMemberExpression = {
  ...BN,
  type: "OptionalMemberExpression",
  object: BNExpression,
  property: BNExpression | BNIdentifier,
  computed?: boolean,
  optional: boolean,
};

export type BNOptionalCallExpression = {
  ...BN,
  type: "OptionalCallExpression",
  callee: BNExpression,
  arguments: Array<BNExpression | BNSpreadElement | BNJSXNamespacedName>,
  optional: boolean,
  typeArguments?: BNTypeParameterInstantiation,
  typeParameters?: BNTSTypeParameterInstantiation,
};

export type BNAnyTypeAnnotation = {
  ...BN,
  type: "AnyTypeAnnotation",
};

export type BNArrayTypeAnnotation = {
  ...BN,
  type: "ArrayTypeAnnotation",
  elementType: BNFlowType,
};

export type BNBooleanTypeAnnotation = {
  ...BN,
  type: "BooleanTypeAnnotation",
};

export type BNBooleanLiteralTypeAnnotation = {
  ...BN,
  type: "BooleanLiteralTypeAnnotation",
  value: boolean,
};

export type BNNullLiteralTypeAnnotation = {
  ...BN,
  type: "NullLiteralTypeAnnotation",
};

export type BNClassImplements = {
  ...BN,
  type: "ClassImplements",
  id: BNIdentifier,
  typeParameters?: BNTypeParameterInstantiation,
};

export type BNDeclareClass = {
  ...BN,
  type: "DeclareClass",
  id: BNIdentifier,
  typeParameters?: BNTypeParameterDeclaration,
  body: BNObjectTypeAnnotation,
  mixins?: Array<BNInterfaceExtends>,
};

export type BNDeclareFunction = {
  ...BN,
  type: "DeclareFunction",
  id: BNIdentifier,
  predicate?: BNDeclaredPredicate,
};

export type BNDeclareInterface = {
  ...BN,
  type: "DeclareInterface",
  id: BNIdentifier,
  typeParameters?: BNTypeParameterDeclaration,
  body: BNObjectTypeAnnotation,
  mixins?: Array<BNInterfaceExtends>,
};

export type BNDeclareModule = {
  ...BN,
  type: "DeclareModule",
  id: BNIdentifier | BNStringLiteral,
  body: BNBlockStatement,
  kind?: "CommonJS" | "ES",
};

export type BNDeclareModuleExports = {
  ...BN,
  type: "DeclareModuleExports",
  typeAnnotation: BNTypeAnnotation,
};

export type BNDeclareTypeAlias = {
  ...BN,
  type: "DeclareTypeAlias",
  id: BNIdentifier,
  typeParameters?: BNTypeParameterDeclaration,
  right: BNFlowType,
};

export type BNDeclareOpaqueType = {
  ...BN,
  type: "DeclareOpaqueType",
  id: BNIdentifier,
  typeParameters?: BNTypeParameterDeclaration,
  supertype?: BNFlowType,
};

export type BNDeclareVariable = {
  ...BN,
  type: "DeclareVariable",
  id: BNIdentifier,
};

export type BNDeclareExportDeclaration = {
  ...BN,
  type: "DeclareExportDeclaration",
  declaration?: BNFlow,
  specifiers?: Array<BNExportSpecifier | BNExportNamespaceSpecifier>,
  source?: BNStringLiteral,
};

export type BNDeclareExportAllDeclaration = {
  ...BN,
  type: "DeclareExportAllDeclaration",
  source: BNStringLiteral,
  exportKind?: "type" | "value",
};

export type BNDeclaredPredicate = {
  ...BN,
  type: "DeclaredPredicate",
  value: BNFlow,
};

export type BNExistsTypeAnnotation = {
  ...BN,
  type: "ExistsTypeAnnotation",
};

export type BNFunctionTypeAnnotation = {
  ...BN,
  type: "FunctionTypeAnnotation",
  typeParameters?: BNTypeParameterDeclaration,
  params: Array<BNFunctionTypeParam>,
  rest?: BNFunctionTypeParam,
  returnType: BNFlowType,
};

export type BNFunctionTypeParam = {
  ...BN,
  type: "FunctionTypeParam",
  name?: BNIdentifier,
  typeAnnotation: BNFlowType,
  optional?: boolean,
};

export type BNGenericTypeAnnotation = {
  ...BN,
  type: "GenericTypeAnnotation",
  id: BNIdentifier | BNQualifiedTypeIdentifier,
  typeParameters?: BNTypeParameterInstantiation,
};

export type BNInferredPredicate = {
  ...BN,
  type: "InferredPredicate",
};

export type BNInterfaceExtends = {
  ...BN,
  type: "InterfaceExtends",
  id: BNIdentifier | BNQualifiedTypeIdentifier,
  typeParameters?: BNTypeParameterInstantiation,
};

export type BNInterfaceDeclaration = {
  ...BN,
  type: "InterfaceDeclaration",
  id: BNIdentifier,
  typeParameters?: BNTypeParameterDeclaration,
  body: BNObjectTypeAnnotation,
  mixins?: Array<BNInterfaceExtends>,
};

export type BNInterfaceTypeAnnotation = {
  ...BN,
  type: "InterfaceTypeAnnotation",
  body: BNObjectTypeAnnotation,
};

export type BNIntersectionTypeAnnotation = {
  ...BN,
  type: "IntersectionTypeAnnotation",
  types: Array<BNFlowType>,
};

export type BNMixedTypeAnnotation = {
  ...BN,
  type: "MixedTypeAnnotation",
};

export type BNEmptyTypeAnnotation = {
  ...BN,
  type: "EmptyTypeAnnotation",
};

export type BNNullableTypeAnnotation = {
  ...BN,
  type: "NullableTypeAnnotation",
  typeAnnotation: BNFlowType,
};

export type BNNumberLiteralTypeAnnotation = {
  ...BN,
  type: "NumberLiteralTypeAnnotation",
  value: number,
};

export type BNNumberTypeAnnotation = {
  ...BN,
  type: "NumberTypeAnnotation",
};

export type BNObjectTypeAnnotation = {
  ...BN,
  type: "ObjectTypeAnnotation",
  properties: Array<BNObjectTypeProperty | BNObjectTypeSpreadProperty>,
  indexers?: Array<BNObjectTypeIndexer>,
  callProperties?: Array<BNObjectTypeCallProperty>,
  internalSlots?: Array<BNObjectTypeInternalSlot>,
  exact?: boolean,
  inexact?: boolean,
};

export type BNObjectTypeInternalSlot = {
  ...BN,
  type: "ObjectTypeInternalSlot",
  id: BNIdentifier,
  value: BNFlowType,
  optional: boolean,
  method: boolean,
};

export type BNObjectTypeCallProperty = {
  ...BN,
  type: "ObjectTypeCallProperty",
  value: BNFlowType,
};

export type BNObjectTypeIndexer = {
  ...BN,
  type: "ObjectTypeIndexer",
  id?: BNIdentifier,
  key: BNFlowType,
  value: BNFlowType,
  variance?: BNVariance,
};

export type BNObjectTypeProperty = {
  ...BN,
  type: "ObjectTypeProperty",
  key: BNIdentifier | BNStringLiteral,
  value: BNFlowType,
  variance?: BNVariance,
  kind: "init" | "get" | "set",
  optional: boolean,
  proto: boolean,
};

export type BNObjectTypeSpreadProperty = {
  ...BN,
  type: "ObjectTypeSpreadProperty",
  argument: BNFlowType,
};

export type BNOpaqueType = {
  ...BN,
  type: "OpaqueType",
  id: BNIdentifier,
  typeParameters?: BNTypeParameterDeclaration,
  supertype?: BNFlowType,
  impltype: BNFlowType,
};

export type BNQualifiedTypeIdentifier = {
  ...BN,
  type: "QualifiedTypeIdentifier",
  id: BNIdentifier,
  qualification: BNIdentifier | BNQualifiedTypeIdentifier,
};

export type BNStringLiteralTypeAnnotation = {
  ...BN,
  type: "StringLiteralTypeAnnotation",
  value: string,
};

export type BNStringTypeAnnotation = {
  ...BN,
  type: "StringTypeAnnotation",
};

export type BNSymbolTypeAnnotation = {
  ...BN,
  type: "SymbolTypeAnnotation",
};

export type BNThisTypeAnnotation = {
  ...BN,
  type: "ThisTypeAnnotation",
};

export type BNTupleTypeAnnotation = {
  ...BN,
  type: "TupleTypeAnnotation",
  types: Array<BNFlowType>,
};

export type BNTypeofTypeAnnotation = {
  ...BN,
  type: "TypeofTypeAnnotation",
  argument: BNFlowType,
};

export type BNTypeAlias = {
  ...BN,
  type: "TypeAlias",
  id: BNIdentifier,
  typeParameters?: BNTypeParameterDeclaration,
  right: BNFlowType,
};

export type BNTypeAnnotation = {
  ...BN,
  type: "TypeAnnotation",
  typeAnnotation: BNFlowType,
};

export type BNTypeCastExpression = {
  ...BN,
  type: "TypeCastExpression",
  expression: BNExpression,
  typeAnnotation: BNTypeAnnotation,
};

export type BNTypeParameter = {
  ...BN,
  type: "TypeParameter",
  bound?: BNTypeAnnotation,
  variance?: BNVariance,
  name: string,
};

export type BNTypeParameterDeclaration = {
  ...BN,
  type: "TypeParameterDeclaration",
  params: Array<BNTypeParameter>,
};

export type BNTypeParameterInstantiation = {
  ...BN,
  type: "TypeParameterInstantiation",
  params: Array<BNFlowType>,
};

export type BNUnionTypeAnnotation = {
  ...BN,
  type: "UnionTypeAnnotation",
  types: Array<BNFlowType>,
};

export type BNVariance = {
  ...BN,
  type: "Variance",
  kind: "minus" | "plus",
};

export type BNVoidTypeAnnotation = {
  ...BN,
  type: "VoidTypeAnnotation",
};

export type BNEnumDeclaration = {
  ...BN,
  type: "EnumDeclaration",
  id: BNIdentifier,
  body:
    | BNEnumBooleanBody
    | BNEnumNumberBody
    | BNEnumStringBody
    | BNEnumSymbolBody,
};

export type BNEnumBooleanBody = {
  ...BN,
  type: "EnumBooleanBody",
  members: Array<BNEnumBooleanMember>,
  explicit: boolean,
};

export type BNEnumNumberBody = {
  ...BN,
  type: "EnumNumberBody",
  members: Array<BNEnumNumberMember>,
  explicit: boolean,
};

export type BNEnumStringBody = {
  ...BN,
  type: "EnumStringBody",
  members: Array<BNEnumStringMember | BNEnumDefaultedMember>,
  explicit: boolean,
};

export type BNEnumSymbolBody = {
  ...BN,
  type: "EnumSymbolBody",
  members: Array<BNEnumDefaultedMember>,
};

export type BNEnumBooleanMember = {
  ...BN,
  type: "EnumBooleanMember",
  id: BNIdentifier,
  init: BNBooleanLiteral,
};

export type BNEnumNumberMember = {
  ...BN,
  type: "EnumNumberMember",
  id: BNIdentifier,
  init: BNNumericLiteral,
};

export type BNEnumStringMember = {
  ...BN,
  type: "EnumStringMember",
  id: BNIdentifier,
  init: BNStringLiteral,
};

export type BNEnumDefaultedMember = {
  ...BN,
  type: "EnumDefaultedMember",
  id: BNIdentifier,
};

export type BNJSXAttribute = {
  ...BN,
  type: "JSXAttribute",
  name: BNJSXIdentifier | BNJSXNamespacedName,
  value?:
    | BNJSXElement
    | BNJSXFragment
    | BNStringLiteral
    | BNJSXExpressionContainer,
};

export type BNJSXClosingElement = {
  ...BN,
  type: "JSXClosingElement",
  name: BNJSXIdentifier | BNJSXMemberExpression | BNJSXNamespacedName,
};

export type BNJSXElement = {
  ...BN,
  type: "JSXElement",
  openingElement: BNJSXOpeningElement,
  closingElement?: BNJSXClosingElement,
  children: Array<
    | BNJSXText
    | BNJSXExpressionContainer
    | BNJSXSpreadChild
    | BNJSXElement
    | BNJSXFragment
  >,
  selfClosing?: boolean,
};

export type BNJSXEmptyExpression = {
  ...BN,
  type: "JSXEmptyExpression",
};

export type BNJSXExpressionContainer = {
  ...BN,
  type: "JSXExpressionContainer",
  expression: BNExpression | BNJSXEmptyExpression,
};

export type BNJSXSpreadChild = {
  ...BN,
  type: "JSXSpreadChild",
  expression: BNExpression,
};

export type BNJSXIdentifier = {
  ...BN,
  type: "JSXIdentifier",
  name: string,
};

export type BNJSXMemberExpression = {
  ...BN,
  type: "JSXMemberExpression",
  object: BNJSXMemberExpression | BNJSXIdentifier,
  property: BNJSXIdentifier,
};

export type BNJSXNamespacedName = {
  ...BN,
  type: "JSXNamespacedName",
  namespace: BNJSXIdentifier,
  name: BNJSXIdentifier,
};

export type BNJSXOpeningElement = {
  ...BN,
  type: "JSXOpeningElement",
  name: BNJSXIdentifier | BNJSXMemberExpression | BNJSXNamespacedName,
  attributes: Array<BNJSXAttribute | BNJSXSpreadAttribute>,
  selfClosing?: boolean,
  typeParameters?:
    | BNTypeParameterInstantiation
    | BNTSTypeParameterInstantiation,
};

export type BNJSXSpreadAttribute = {
  ...BN,
  type: "JSXSpreadAttribute",
  argument: BNExpression,
};

export type BNJSXText = { ...BN, type: "JSXText", value: string };

export type BNJSXFragment = {
  ...BN,
  type: "JSXFragment",
  openingFragment: BNJSXOpeningFragment,
  closingFragment: BNJSXClosingFragment,
  children: Array<
    | BNJSXText
    | BNJSXExpressionContainer
    | BNJSXSpreadChild
    | BNJSXElement
    | BNJSXFragment
  >,
};

export type BNJSXOpeningFragment = {
  ...BN,
  type: "JSXOpeningFragment",
};

export type BNJSXClosingFragment = {
  ...BN,
  type: "JSXClosingFragment",
};

export type BNNoop = { ...BN, type: "Noop" };

export type BNPlaceholder = {
  ...BN,
  type: "Placeholder",
  expectedNode:
    | "Identifier"
    | "StringLiteral"
    | "Expression"
    | "Statement"
    | "Declaration"
    | "BlockStatement"
    | "ClassBody"
    | "Pattern",
  name: BNIdentifier,
};

export type BNV8IntrinsicIdentifier = {
  ...BN,
  type: "V8IntrinsicIdentifier",
  name: string,
};

export type BNArgumentPlaceholder = {
  ...BN,
  type: "ArgumentPlaceholder",
};

export type BNBindExpression = {
  ...BN,
  type: "BindExpression",
  object: BNExpression,
  callee: BNExpression,
};

export type BNClassProperty = {
  ...BN,
  type: "ClassProperty",
  key: BNIdentifier | BNStringLiteral | BNNumericLiteral | BNExpression,
  value?: BNExpression,
  typeAnnotation?: BNTypeAnnotation | BNTSTypeAnnotation | BNNoop,
  decorators?: Array<BNDecorator>,
  computed?: boolean,
  abstract?: boolean,
  accessibility?: "public" | "private" | "protected",
  declare?: boolean,
  definite?: boolean,
  optional?: boolean,
  readonly?: boolean,
};

export type BNPipelineTopicExpression = {
  ...BN,
  type: "PipelineTopicExpression",
  expression: BNExpression,
};

export type BNPipelineBareFunction = {
  ...BN,
  type: "PipelineBareFunction",
  callee: BNExpression,
};

export type BNPipelinePrimaryTopicReference = {
  ...BN,
  type: "PipelinePrimaryTopicReference",
};

export type BNClassPrivateProperty = {
  ...BN,
  type: "ClassPrivateProperty",
  key: BNPrivateName,
  value?: BNExpression,
  decorators?: Array<BNDecorator>,
};

export type BNClassPrivateMethod = {
  ...BN,
  type: "ClassPrivateMethod",
  kind?: "get" | "set" | "method" | "constructor",
  key: BNPrivateName,
  params: Array<
    BNIdentifier | BNPattern | BNRestElement | BNTSParameterProperty
  >,
  body: BNBlockStatement,
  abstract?: boolean,
  access?: "public" | "private" | "protected",
  accessibility?: "public" | "private" | "protected",
  async?: boolean,
  computed?: boolean,
  decorators?: Array<BNDecorator>,
  generator?: boolean,
  optional?: boolean,
  returnType?: BNTypeAnnotation | BNTSTypeAnnotation | BNNoop,
  typeParameters?:
    | BNTypeParameterDeclaration
    | BNTSTypeParameterDeclaration
    | BNNoop,
};

export type BNImportAttribute = {
  ...BN,
  type: "ImportAttribute",
  key: BNIdentifier | BNStringLiteral,
  value: BNStringLiteral,
};

export type BNDecorator = {
  ...BN,
  type: "Decorator",
  expression: BNExpression,
};

export type BNDoExpression = {
  ...BN,
  type: "DoExpression",
  body: BNBlockStatement,
};

export type BNExportDefaultSpecifier = {
  ...BN,
  type: "ExportDefaultSpecifier",
  exported: BNIdentifier,
};

export type BNPrivateName = {
  ...BN,
  type: "PrivateName",
  id: BNIdentifier,
};

export type BNRecordExpression = {
  ...BN,
  type: "RecordExpression",
  properties: Array<BNObjectProperty | BNSpreadElement>,
};

export type BNTupleExpression = {
  ...BN,
  type: "TupleExpression",
  elements?: Array<BNExpression | BNSpreadElement>,
};

export type BNDecimalLiteral = {
  ...BN,
  type: "DecimalLiteral",
  value: string,
};

export type BNStaticBlock = {
  ...BN,
  type: "StaticBlock",
  body: Array<BNStatement>,
};

export type BNTSParameterProperty = {
  ...BN,
  type: "TSParameterProperty",
  parameter: BNIdentifier | BNAssignmentPattern,
  accessibility?: "public" | "private" | "protected",
  readonly?: boolean,
};

export type BNTSDeclareFunction = {
  ...BN,
  type: "TSDeclareFunction",
  id?: BNIdentifier,
  typeParameters?: BNTSTypeParameterDeclaration | BNNoop,
  params: Array<
    BNIdentifier | BNPattern | BNRestElement | BNTSParameterProperty
  >,
  returnType?: BNTSTypeAnnotation | BNNoop,
  async?: boolean,
  declare?: boolean,
  generator?: boolean,
};

export type BNTSDeclareMethod = {
  ...BN,
  type: "TSDeclareMethod",
  decorators?: Array<BNDecorator>,
  key: BNIdentifier | BNStringLiteral | BNNumericLiteral | BNExpression,
  typeParameters?: BNTSTypeParameterDeclaration | BNNoop,
  params: Array<
    BNIdentifier | BNPattern | BNRestElement | BNTSParameterProperty
  >,
  returnType?: BNTSTypeAnnotation | BNNoop,
  abstract?: boolean,
  access?: "public" | "private" | "protected",
  accessibility?: "public" | "private" | "protected",
  async?: boolean,
  computed?: boolean,
  generator?: boolean,
  kind?: "get" | "set" | "method" | "constructor",
  optional?: boolean,
};

export type BNTSQualifiedName = {
  ...BN,
  type: "TSQualifiedName",
  left: BNTSEntityName,
  right: BNIdentifier,
};

export type BNTSCallSignatureDeclaration = {
  ...BN,
  type: "TSCallSignatureDeclaration",
  typeParameters?: BNTSTypeParameterDeclaration,
  parameters: Array<BNIdentifier | BNRestElement>,
  typeAnnotation?: BNTSTypeAnnotation,
};

export type BNTSConstructSignatureDeclaration = {
  ...BN,
  type: "TSConstructSignatureDeclaration",
  typeParameters?: BNTSTypeParameterDeclaration,
  parameters: Array<BNIdentifier | BNRestElement>,
  typeAnnotation?: BNTSTypeAnnotation,
};

export type BNTSPropertySignature = {
  ...BN,
  type: "TSPropertySignature",
  key: BNExpression,
  typeAnnotation?: BNTSTypeAnnotation,
  initializer?: BNExpression,
  computed?: boolean,
  optional?: boolean,
  readonly?: boolean,
};

export type BNTSMethodSignature = {
  ...BN,
  type: "TSMethodSignature",
  key: BNExpression,
  typeParameters?: BNTSTypeParameterDeclaration,
  parameters: Array<BNIdentifier | BNRestElement>,
  typeAnnotation?: BNTSTypeAnnotation,
  computed?: boolean,
  optional?: boolean,
};

export type BNTSIndexSignature = {
  ...BN,
  type: "TSIndexSignature",
  parameters: Array<BNIdentifier>,
  typeAnnotation?: BNTSTypeAnnotation,
  readonly?: boolean,
};

export type BNTSAnyKeyword = { ...BN, type: "TSAnyKeyword" };

export type BNTSBooleanKeyword = {
  ...BN,
  type: "TSBooleanKeyword",
};

export type BNTSBigIntKeyword = {
  ...BN,
  type: "TSBigIntKeyword",
};

export type BNTSIntrinsicKeyword = {
  ...BN,
  type: "TSIntrinsicKeyword",
};

export type BNTSNeverKeyword = { ...BN, type: "TSNeverKeyword" };

export type BNTSNullKeyword = { ...BN, type: "TSNullKeyword" };

export type BNTSNumberKeyword = {
  ...BN,
  type: "TSNumberKeyword",
};

export type BNTSObjectKeyword = {
  ...BN,
  type: "TSObjectKeyword",
};

export type BNTSStringKeyword = {
  ...BN,
  type: "TSStringKeyword",
};

export type BNTSSymbolKeyword = {
  ...BN,
  type: "TSSymbolKeyword",
};

export type BNTSUndefinedKeyword = {
  ...BN,
  type: "TSUndefinedKeyword",
};

export type BNTSUnknownKeyword = {
  ...BN,
  type: "TSUnknownKeyword",
};

export type BNTSVoidKeyword = { ...BN, type: "TSVoidKeyword" };

export type BNTSThisType = { ...BN, type: "TSThisType" };

export type BNTSFunctionType = {
  ...BN,
  type: "TSFunctionType",
  typeParameters?: BNTSTypeParameterDeclaration,
  parameters: Array<BNIdentifier | BNRestElement>,
  typeAnnotation?: BNTSTypeAnnotation,
};

export type BNTSConstructorType = {
  ...BN,
  type: "TSConstructorType",
  typeParameters?: BNTSTypeParameterDeclaration,
  parameters: Array<BNIdentifier | BNRestElement>,
  typeAnnotation?: BNTSTypeAnnotation,
};

export type BNTSTypeReference = {
  ...BN,
  type: "TSTypeReference",
  typeName: BNTSEntityName,
  typeParameters?: BNTSTypeParameterInstantiation,
};

export type BNTSTypePredicate = {
  ...BN,
  type: "TSTypePredicate",
  parameterName: BNIdentifier | BNTSThisType,
  typeAnnotation?: BNTSTypeAnnotation,
  asserts?: boolean,
};

export type BNTSTypeQuery = {
  ...BN,
  type: "TSTypeQuery",
  exprName: BNTSEntityName | BNTSImportType,
};

export type BNTSTypeLiteral = {
  ...BN,
  type: "TSTypeLiteral",
  members: Array<BNTSTypeElement>,
};

export type BNTSArrayType = {
  ...BN,
  type: "TSArrayType",
  elementType: BNTSType,
};

export type BNTSTupleType = {
  ...BN,
  type: "TSTupleType",
  elementTypes: Array<BNTSType | BNTSNamedTupleMember>,
};

export type BNTSOptionalType = {
  ...BN,
  type: "TSOptionalType",
  typeAnnotation: BNTSType,
};

export type BNTSRestType = {
  ...BN,
  type: "TSRestType",
  typeAnnotation: BNTSType,
};

export type BNTSNamedTupleMember = {
  ...BN,
  type: "TSNamedTupleMember",
  label: BNIdentifier,
  elementType: BNTSType,
  optional?: boolean,
};

export type BNTSUnionType = {
  ...BN,
  type: "TSUnionType",
  types: Array<BNTSType>,
};

export type BNTSIntersectionType = {
  ...BN,
  type: "TSIntersectionType",
  types: Array<BNTSType>,
};

export type BNTSConditionalType = {
  ...BN,
  type: "TSConditionalType",
  checkType: BNTSType,
  extendsType: BNTSType,
  trueType: BNTSType,
  falseType: BNTSType,
};

export type BNTSInferType = {
  ...BN,
  type: "TSInferType",
  typeParameter: BNTSTypeParameter,
};

export type BNTSParenthesizedType = {
  ...BN,
  type: "TSParenthesizedType",
  typeAnnotation: BNTSType,
};

export type BNTSTypeOperator = {
  ...BN,
  type: "TSTypeOperator",
  typeAnnotation: BNTSType,
  operator: string,
};

export type BNTSIndexedAccessType = {
  ...BN,
  type: "TSIndexedAccessType",
  objectType: BNTSType,
  indexType: BNTSType,
};

export type BNTSMappedType = {
  ...BN,
  type: "TSMappedType",
  typeParameter: BNTSTypeParameter,
  typeAnnotation?: BNTSType,
  nameType?: BNTSType,
  optional?: boolean,
  readonly?: boolean,
};

export type BNTSLiteralType = {
  ...BN,
  type: "TSLiteralType",
  literal:
    | BNNumericLiteral
    | BNStringLiteral
    | BNBooleanLiteral
    | BNBigIntLiteral,
};

export type BNTSExpressionWithTypeArguments = {
  ...BN,
  type: "TSExpressionWithTypeArguments",
  expression: BNTSEntityName,
  typeParameters?: BNTSTypeParameterInstantiation,
};

export type BNTSInterfaceDeclaration = {
  ...BN,
  type: "TSInterfaceDeclaration",
  id: BNIdentifier,
  typeParameters?: BNTSTypeParameterDeclaration,
  body: BNTSInterfaceBody,
  declare?: boolean,
};

export type BNTSInterfaceBody = {
  ...BN,
  type: "TSInterfaceBody",
  body: Array<BNTSTypeElement>,
};

export type BNTSTypeAliasDeclaration = {
  ...BN,
  type: "TSTypeAliasDeclaration",
  id: BNIdentifier,
  typeParameters?: BNTSTypeParameterDeclaration,
  typeAnnotation: BNTSType,
  declare?: boolean,
};

export type BNTSAsExpression = {
  ...BN,
  type: "TSAsExpression",
  expression: BNExpression,
  typeAnnotation: BNTSType,
};

export type BNTSTypeAssertion = {
  ...BN,
  type: "TSTypeAssertion",
  typeAnnotation: BNTSType,
  expression: BNExpression,
};

export type BNTSEnumDeclaration = {
  ...BN,
  type: "TSEnumDeclaration",
  id: BNIdentifier,
  members: Array<BNTSEnumMember>,
  declare?: boolean,
  initializer?: BNExpression,
};

export type BNTSEnumMember = {
  ...BN,
  type: "TSEnumMember",
  id: BNIdentifier | BNStringLiteral,
  initializer?: BNExpression,
};

export type BNTSModuleDeclaration = {
  ...BN,
  type: "TSModuleDeclaration",
  id: BNIdentifier | BNStringLiteral,
  body: BNTSModuleBlock | BNTSModuleDeclaration,
  declare?: boolean,
  global?: boolean,
};

export type BNTSModuleBlock = {
  ...BN,
  type: "TSModuleBlock",
  body: Array<BNStatement>,
};

export type BNTSImportType = {
  ...BN,
  type: "TSImportType",
  argument: BNStringLiteral,
  qualifier?: BNTSEntityName,
  typeParameters?: BNTSTypeParameterInstantiation,
};

export type BNTSImportEqualsDeclaration = {
  ...BN,
  type: "TSImportEqualsDeclaration",
  id: BNIdentifier,
  moduleReference: BNTSEntityName | BNTSExternalModuleReference,
  isExport: boolean,
};

export type BNTSExternalModuleReference = {
  ...BN,
  type: "TSExternalModuleReference",
  expression: BNStringLiteral,
};

export type BNTSNonNullExpression = {
  ...BN,
  type: "TSNonNullExpression",
  expression: BNExpression,
};

export type BNTSExportAssignment = {
  ...BN,
  type: "TSExportAssignment",
  expression: BNExpression,
};

export type BNTSNamespaceExportDeclaration = {
  ...BN,
  type: "TSNamespaceExportDeclaration",
  id: BNIdentifier,
};

export type BNTSTypeAnnotation = {
  ...BN,
  type: "TSTypeAnnotation",
  typeAnnotation: BNTSType,
};

export type BNTSTypeParameterInstantiation = {
  ...BN,
  type: "TSTypeParameterInstantiation",
  params: Array<BNTSType>,
};

export type BNTSTypeParameterDeclaration = {
  ...BN,
  type: "TSTypeParameterDeclaration",
  params: Array<BNTSTypeParameter>,
};

export type BNTSTypeParameter = {
  ...BN,
  type: "TSTypeParameter",
  constraint?: BNTSType,
  name: string,
};

export type BNExpression =
  | BNArrayExpression
  | BNAssignmentExpression
  | BNBinaryExpression
  | BNCallExpression
  | BNConditionalExpression
  | BNFunctionExpression
  | BNIdentifier
  | BNStringLiteral
  | BNNumericLiteral
  | BNNullLiteral
  | BNBooleanLiteral
  | BNRegExpLiteral
  | BNLogicalExpression
  | BNMemberExpression
  | BNNewExpression
  | BNObjectExpression
  | BNSequenceExpression
  | BNParenthesizedExpression
  | BNThisExpression
  | BNUnaryExpression
  | BNUpdateExpression
  | BNArrowFunctionExpression
  | BNClassExpression
  | BNMetaProperty
  | BNSuper
  | BNTaggedTemplateExpression
  | BNTemplateLiteral
  | BNYieldExpression
  | BNAwaitExpression
  | BNImport
  | BNBigIntLiteral
  | BNOptionalMemberExpression
  | BNOptionalCallExpression
  | BNTypeCastExpression
  | BNJSXElement
  | BNJSXFragment
  | BNBindExpression
  | BNPipelinePrimaryTopicReference
  | BNDoExpression
  | BNRecordExpression
  | BNTupleExpression
  | BNDecimalLiteral
  | BNTSAsExpression
  | BNTSTypeAssertion
  | BNTSNonNullExpression;
export type BNBinary = BNBinaryExpression | BNLogicalExpression;
export type BNScopable =
  | BNBlockStatement
  | BNCatchClause
  | BNDoWhileStatement
  | BNForInStatement
  | BNForStatement
  | BNFunctionDeclaration
  | BNFunctionExpression
  | BNProgram
  | BNObjectMethod
  | BNSwitchStatement
  | BNWhileStatement
  | BNArrowFunctionExpression
  | BNClassExpression
  | BNClassDeclaration
  | BNForOfStatement
  | BNClassMethod
  | BNClassPrivateMethod
  | BNStaticBlock
  | BNTSModuleBlock;
export type BNBlockParent =
  | BNBlockStatement
  | BNCatchClause
  | BNDoWhileStatement
  | BNForInStatement
  | BNForStatement
  | BNFunctionDeclaration
  | BNFunctionExpression
  | BNProgram
  | BNObjectMethod
  | BNSwitchStatement
  | BNWhileStatement
  | BNArrowFunctionExpression
  | BNForOfStatement
  | BNClassMethod
  | BNClassPrivateMethod
  | BNStaticBlock
  | BNTSModuleBlock;
export type BNBlock = BNBlockStatement | BNProgram | BNTSModuleBlock;
export type BNStatement =
  | BNBlockStatement
  | BNBreakStatement
  | BNContinueStatement
  | BNDebuggerStatement
  | BNDoWhileStatement
  | BNEmptyStatement
  | BNExpressionStatement
  | BNForInStatement
  | BNForStatement
  | BNFunctionDeclaration
  | BNIfStatement
  | BNLabeledStatement
  | BNReturnStatement
  | BNSwitchStatement
  | BNThrowStatement
  | BNTryStatement
  | BNVariableDeclaration
  | BNWhileStatement
  | BNWithStatement
  | BNClassDeclaration
  | BNExportAllDeclaration
  | BNExportDefaultDeclaration
  | BNExportNamedDeclaration
  | BNForOfStatement
  | BNImportDeclaration
  | BNDeclareClass
  | BNDeclareFunction
  | BNDeclareInterface
  | BNDeclareModule
  | BNDeclareModuleExports
  | BNDeclareTypeAlias
  | BNDeclareOpaqueType
  | BNDeclareVariable
  | BNDeclareExportDeclaration
  | BNDeclareExportAllDeclaration
  | BNInterfaceDeclaration
  | BNOpaqueType
  | BNTypeAlias
  | BNEnumDeclaration
  | BNTSDeclareFunction
  | BNTSInterfaceDeclaration
  | BNTSTypeAliasDeclaration
  | BNTSEnumDeclaration
  | BNTSModuleDeclaration
  | BNTSImportEqualsDeclaration
  | BNTSExportAssignment
  | BNTSNamespaceExportDeclaration;
export type BNTerminatorless =
  | BNBreakStatement
  | BNContinueStatement
  | BNReturnStatement
  | BNThrowStatement
  | BNYieldExpression
  | BNAwaitExpression;
export type BNCompletionStatement =
  | BNBreakStatement
  | BNContinueStatement
  | BNReturnStatement
  | BNThrowStatement;
export type BNConditional = BNConditionalExpression | BNIfStatement;
export type BNLoop =
  | BNDoWhileStatement
  | BNForInStatement
  | BNForStatement
  | BNWhileStatement
  | BNForOfStatement;
export type BNWhile = BNDoWhileStatement | BNWhileStatement;
export type BNExpressionWrapper =
  | BNExpressionStatement
  | BNParenthesizedExpression
  | BNTypeCastExpression;
export type BNFor = BNForInStatement | BNForStatement | BNForOfStatement;
export type BNForXStatement = BNForInStatement | BNForOfStatement;
export type BNFunction =
  | BNFunctionDeclaration
  | BNFunctionExpression
  | BNObjectMethod
  | BNArrowFunctionExpression
  | BNClassMethod
  | BNClassPrivateMethod;
export type BNFunctionParent =
  | BNFunctionDeclaration
  | BNFunctionExpression
  | BNObjectMethod
  | BNArrowFunctionExpression
  | BNClassMethod
  | BNClassPrivateMethod;
export type BNPureish =
  | BNFunctionDeclaration
  | BNFunctionExpression
  | BNStringLiteral
  | BNNumericLiteral
  | BNNullLiteral
  | BNBooleanLiteral
  | BNRegExpLiteral
  | BNArrowFunctionExpression
  | BNBigIntLiteral
  | BNDecimalLiteral;
export type BNDeclaration =
  | BNFunctionDeclaration
  | BNVariableDeclaration
  | BNClassDeclaration
  | BNExportAllDeclaration
  | BNExportDefaultDeclaration
  | BNExportNamedDeclaration
  | BNImportDeclaration
  | BNDeclareClass
  | BNDeclareFunction
  | BNDeclareInterface
  | BNDeclareModule
  | BNDeclareModuleExports
  | BNDeclareTypeAlias
  | BNDeclareOpaqueType
  | BNDeclareVariable
  | BNDeclareExportDeclaration
  | BNDeclareExportAllDeclaration
  | BNInterfaceDeclaration
  | BNOpaqueType
  | BNTypeAlias
  | BNEnumDeclaration
  | BNTSDeclareFunction
  | BNTSInterfaceDeclaration
  | BNTSTypeAliasDeclaration
  | BNTSEnumDeclaration
  | BNTSModuleDeclaration;
export type BNPatternLike =
  | BNIdentifier
  | BNRestElement
  | BNAssignmentPattern
  | BNArrayPattern
  | BNObjectPattern;
export type BNLVal =
  | BNIdentifier
  | BNMemberExpression
  | BNRestElement
  | BNAssignmentPattern
  | BNArrayPattern
  | BNObjectPattern
  | BNTSParameterProperty;
export type BNTSEntityName = BNIdentifier | BNTSQualifiedName;
export type BNLiteral =
  | BNStringLiteral
  | BNNumericLiteral
  | BNNullLiteral
  | BNBooleanLiteral
  | BNRegExpLiteral
  | BNTemplateLiteral
  | BNBigIntLiteral
  | BNDecimalLiteral;
export type BNImmutable =
  | BNStringLiteral
  | BNNumericLiteral
  | BNNullLiteral
  | BNBooleanLiteral
  | BNBigIntLiteral
  | BNJSXAttribute
  | BNJSXClosingElement
  | BNJSXElement
  | BNJSXExpressionContainer
  | BNJSXSpreadChild
  | BNJSXOpeningElement
  | BNJSXText
  | BNJSXFragment
  | BNJSXOpeningFragment
  | BNJSXClosingFragment
  | BNDecimalLiteral;
export type BNUserWhitespacable =
  | BNObjectMethod
  | BNObjectProperty
  | BNObjectTypeInternalSlot
  | BNObjectTypeCallProperty
  | BNObjectTypeIndexer
  | BNObjectTypeProperty
  | BNObjectTypeSpreadProperty;
export type BNMethod = BNObjectMethod | BNClassMethod | BNClassPrivateMethod;
export type BNObjectMember = BNObjectMethod | BNObjectProperty;
export type BNProperty =
  | BNObjectProperty
  | BNClassProperty
  | BNClassPrivateProperty;
export type BNUnaryLike = BNUnaryExpression | BNSpreadElement;
export type BNPattern = BNAssignmentPattern | BNArrayPattern | BNObjectPattern;
export type BNClass = BNClassExpression | BNClassDeclaration;
export type BNModuleDeclaration =
  | BNExportAllDeclaration
  | BNExportDefaultDeclaration
  | BNExportNamedDeclaration
  | BNImportDeclaration;
export type BNExportDeclaration =
  | BNExportAllDeclaration
  | BNExportDefaultDeclaration
  | BNExportNamedDeclaration;
export type BNModuleSpecifier =
  | BNExportSpecifier
  | BNImportDefaultSpecifier
  | BNImportNamespaceSpecifier
  | BNImportSpecifier
  | BNExportNamespaceSpecifier
  | BNExportDefaultSpecifier;
export type BNFlow =
  | BNAnyTypeAnnotation
  | BNArrayTypeAnnotation
  | BNBooleanTypeAnnotation
  | BNBooleanLiteralTypeAnnotation
  | BNNullLiteralTypeAnnotation
  | BNClassImplements
  | BNDeclareClass
  | BNDeclareFunction
  | BNDeclareInterface
  | BNDeclareModule
  | BNDeclareModuleExports
  | BNDeclareTypeAlias
  | BNDeclareOpaqueType
  | BNDeclareVariable
  | BNDeclareExportDeclaration
  | BNDeclareExportAllDeclaration
  | BNDeclaredPredicate
  | BNExistsTypeAnnotation
  | BNFunctionTypeAnnotation
  | BNFunctionTypeParam
  | BNGenericTypeAnnotation
  | BNInferredPredicate
  | BNInterfaceExtends
  | BNInterfaceDeclaration
  | BNInterfaceTypeAnnotation
  | BNIntersectionTypeAnnotation
  | BNMixedTypeAnnotation
  | BNEmptyTypeAnnotation
  | BNNullableTypeAnnotation
  | BNNumberLiteralTypeAnnotation
  | BNNumberTypeAnnotation
  | BNObjectTypeAnnotation
  | BNObjectTypeInternalSlot
  | BNObjectTypeCallProperty
  | BNObjectTypeIndexer
  | BNObjectTypeProperty
  | BNObjectTypeSpreadProperty
  | BNOpaqueType
  | BNQualifiedTypeIdentifier
  | BNStringLiteralTypeAnnotation
  | BNStringTypeAnnotation
  | BNSymbolTypeAnnotation
  | BNThisTypeAnnotation
  | BNTupleTypeAnnotation
  | BNTypeofTypeAnnotation
  | BNTypeAlias
  | BNTypeAnnotation
  | BNTypeCastExpression
  | BNTypeParameter
  | BNTypeParameterDeclaration
  | BNTypeParameterInstantiation
  | BNUnionTypeAnnotation
  | BNVariance
  | BNVoidTypeAnnotation;
export type BNFlowType =
  | BNAnyTypeAnnotation
  | BNArrayTypeAnnotation
  | BNBooleanTypeAnnotation
  | BNBooleanLiteralTypeAnnotation
  | BNNullLiteralTypeAnnotation
  | BNExistsTypeAnnotation
  | BNFunctionTypeAnnotation
  | BNGenericTypeAnnotation
  | BNInterfaceTypeAnnotation
  | BNIntersectionTypeAnnotation
  | BNMixedTypeAnnotation
  | BNEmptyTypeAnnotation
  | BNNullableTypeAnnotation
  | BNNumberLiteralTypeAnnotation
  | BNNumberTypeAnnotation
  | BNObjectTypeAnnotation
  | BNStringLiteralTypeAnnotation
  | BNStringTypeAnnotation
  | BNSymbolTypeAnnotation
  | BNThisTypeAnnotation
  | BNTupleTypeAnnotation
  | BNTypeofTypeAnnotation
  | BNUnionTypeAnnotation
  | BNVoidTypeAnnotation;
export type BNFlowBaseAnnotation =
  | BNAnyTypeAnnotation
  | BNBooleanTypeAnnotation
  | BNNullLiteralTypeAnnotation
  | BNMixedTypeAnnotation
  | BNEmptyTypeAnnotation
  | BNNumberTypeAnnotation
  | BNStringTypeAnnotation
  | BNSymbolTypeAnnotation
  | BNThisTypeAnnotation
  | BNVoidTypeAnnotation;
export type BNFlowDeclaration =
  | BNDeclareClass
  | BNDeclareFunction
  | BNDeclareInterface
  | BNDeclareModule
  | BNDeclareModuleExports
  | BNDeclareTypeAlias
  | BNDeclareOpaqueType
  | BNDeclareVariable
  | BNDeclareExportDeclaration
  | BNDeclareExportAllDeclaration
  | BNInterfaceDeclaration
  | BNOpaqueType
  | BNTypeAlias;
export type BNFlowPredicate = BNDeclaredPredicate | BNInferredPredicate;
export type BNEnumBody =
  | BNEnumBooleanBody
  | BNEnumNumberBody
  | BNEnumStringBody
  | BNEnumSymbolBody;
export type BNEnumMember =
  | BNEnumBooleanMember
  | BNEnumNumberMember
  | BNEnumStringMember
  | BNEnumDefaultedMember;
export type BNJSX =
  | BNJSXAttribute
  | BNJSXClosingElement
  | BNJSXElement
  | BNJSXEmptyExpression
  | BNJSXExpressionContainer
  | BNJSXSpreadChild
  | BNJSXIdentifier
  | BNJSXMemberExpression
  | BNJSXNamespacedName
  | BNJSXOpeningElement
  | BNJSXSpreadAttribute
  | BNJSXText
  | BNJSXFragment
  | BNJSXOpeningFragment
  | BNJSXClosingFragment;
export type BNPrivate =
  | BNClassPrivateProperty
  | BNClassPrivateMethod
  | BNPrivateName;
export type BNTSTypeElement =
  | BNTSCallSignatureDeclaration
  | BNTSConstructSignatureDeclaration
  | BNTSPropertySignature
  | BNTSMethodSignature
  | BNTSIndexSignature;
export type BNTSType =
  | BNTSAnyKeyword
  | BNTSBooleanKeyword
  | BNTSBigIntKeyword
  | BNTSIntrinsicKeyword
  | BNTSNeverKeyword
  | BNTSNullKeyword
  | BNTSNumberKeyword
  | BNTSObjectKeyword
  | BNTSStringKeyword
  | BNTSSymbolKeyword
  | BNTSUndefinedKeyword
  | BNTSUnknownKeyword
  | BNTSVoidKeyword
  | BNTSThisType
  | BNTSFunctionType
  | BNTSConstructorType
  | BNTSTypeReference
  | BNTSTypePredicate
  | BNTSTypeQuery
  | BNTSTypeLiteral
  | BNTSArrayType
  | BNTSTupleType
  | BNTSOptionalType
  | BNTSRestType
  | BNTSUnionType
  | BNTSIntersectionType
  | BNTSConditionalType
  | BNTSInferType
  | BNTSParenthesizedType
  | BNTSTypeOperator
  | BNTSIndexedAccessType
  | BNTSMappedType
  | BNTSLiteralType
  | BNTSExpressionWithTypeArguments
  | BNTSImportType;
export type BNTSBaseType =
  | BNTSAnyKeyword
  | BNTSBooleanKeyword
  | BNTSBigIntKeyword
  | BNTSIntrinsicKeyword
  | BNTSNeverKeyword
  | BNTSNullKeyword
  | BNTSNumberKeyword
  | BNTSObjectKeyword
  | BNTSStringKeyword
  | BNTSSymbolKeyword
  | BNTSUndefinedKeyword
  | BNTSUnknownKeyword
  | BNTSVoidKeyword
  | BNTSThisType
  | BNTSLiteralType;
